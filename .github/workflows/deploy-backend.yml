name: Deploy Backend Personigrama

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install OpenConnect
        run: sudo apt-get install -y openconnect

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Connect to VPN
        run: |
          echo "${{ secrets.VPN_PASSWORD }}" | sudo openconnect \
            --protocol=gp \
            --user="${{ secrets.VPN_USER }}" \
            --passwd-on-stdin \
            ${{ secrets.VPN_HOST }} \
            --servercert pin-sha256:e+mVC0ZMBRpVuuepldqN0mN6RvimRBTzlm5zZbGbcmA= -b
        env:
          VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
          VPN_USER: ${{ secrets.VPN_USER }}
          VPN_HOST: ${{ secrets.VPN_HOST }}

      - name: Verify VPN connection
        run: ip a

      - name: List network routes
        run: ip route

      - name: Test internal connectivity with SSH
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} 'echo "SSH connection successful"'

      - name: Clone repository on remote server
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
            cd /var/personigrama/personigramaUnibagueBackend || exit;
          
            # Ensure Git recognizes the directory as safe
            git config --global --add safe.directory /var/personigrama/personigramaUnibagueBackend;
          
            # Check if there are local changes before stashing
            if [[ $(git status --porcelain) ]]; then
              git stash;
              echo "Local changes saved with git stash";
              STASHED=true;
            else
              echo "No local changes found";
              STASHED=false;
            fi
          
            # Perform git pull with rebase
            git pull --rebase;
          
            # Remove stash only if one was created
            if [[ "$STASHED" == "true" ]]; then
              git stash drop;
              echo "Stash removed";
            fi'      

      - name: Build and Deploy Backend on Remote Server
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
            cd /var/personigrama/personigramaUnibagueBackend;
          
            # Set execution permission for mvnw
            chmod +x ./mvnw;
          
            # Build the Spring Boot application
            ./mvnw clean package -DskipTests;
          
            # Stop existing Spring Boot service using sudo with password input
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl stop backend-personigrama;
          
            # Ensure the JAR file exists before replacing it
            if [ -f target/*.jar ]; then
              echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S mv target/*.jar /var/personigrama/personigramaUnibagueBackend/backend.jar;
            else
              echo "Error: JAR file not found. Build may have failed.";
              exit 1;
            fi
          
            # Start the backend service
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl start backend-personigrama;
          
            # Check service status
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl status backend-personigrama --no-pager;'
