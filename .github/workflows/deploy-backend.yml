name: Deploy Backend Personigrama

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ðŸ›  Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensures a full clone of the repository

      - name:  Install OpenConnect (VPN)
        run: sudo apt-get install -y openconnect

      - name:  Install sshpass (for secure SSH login)
        run: sudo apt-get install -y sshpass

      - name:  Connect to VPN
        run: |
          echo "${{ secrets.VPN_PASSWORD }}" | sudo openconnect \
            --protocol=gp \
            --user="${{ secrets.VPN_USER }}" \
            --passwd-on-stdin \
            ${{ secrets.VPN_HOST }} \
            --servercert pin-sha256:e+mVC0ZMBRpVuuepldqN0mN6RvimRBTzlm5zZbGbcmA= -b
        env:
          VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
          VPN_USER: ${{ secrets.VPN_USER }}
          VPN_HOST: ${{ secrets.VPN_HOST }}

      - name:  Verify VPN Connection
        run: ip a

      - name:  List Network Routes
        run: ip route

      - name:  Test Internal Connectivity via SSH
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} 'echo "SSH connection successful"'

      - name:  Clone Repository on Remote Server
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
            cd /var/personigrama/personigramaUnibagueBackend || exit;

            # Ensure Git recognizes the directory as safe
            git config --global --add safe.directory /var/personigrama/personigramaUnibagueBackend;

            # Stash any local changes before pulling updates
            if [[ $(git status --porcelain) ]]; then
              git stash;
              echo "Local changes saved with git stash";
              STASHED=true;
            else
              echo "No local changes found";
              STASHED=false;
            fi

            # Pull the latest changes
            git pull --rebase;

            # Remove stash only if it was created
            if [[ "$STASHED" == "true" ]]; then
              git stash drop;
              echo "Stash removed";
            fi'      

      - name:  Build and Deploy Backend
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
            cd /var/personigrama/personigramaUnibagueBackend;

            # Set execution permission for Maven wrapper
            chmod +x ./mvnw;

            # Clean and install dependencies
            ./mvnw clean install -DskipTests;

            # Package the Spring Boot application into a JAR file
            ./mvnw package -DskipTests;

            # Stop existing backend service if it is running
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl stop backend-personigrama || echo "Service not running, skipping stop.";

            # Move the newly built JAR file to the deployment directory
            if [ -f target/*.jar ]; then
              echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S mv target/*.jar /var/personigrama/personigramaUnibagueBackend/backend.jar;
            else
              echo "Error: JAR file not found. Build may have failed.";
              exit 1;
            fi

            # Reload system services
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl daemon-reload;

            # Restart the backend service
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl start backend-personigrama || echo "Service not found, check systemd configuration.";

            # Check the status of the backend service
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl status backend-personigrama --no-pager;
          '
