name: Deploy Backend Personigrama

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🛠 Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensures a full clone of the repository

      - name: 📥 Install OpenConnect (VPN)
        run: sudo apt-get install -y openconnect

      - name: 🔑 Install sshpass (for secure SSH login)
        run: sudo apt-get install -y sshpass

      - name: 🌐 Connect to VPN
        run: |
          echo "${{ secrets.VPN_PASSWORD }}" | sudo openconnect \
            --protocol=gp \
            --user="${{ secrets.VPN_USER }}" \
            --passwd-on-stdin \
            ${{ secrets.VPN_HOST }} \
            --servercert pin-sha256:e+mVC0ZMBRpVuuepldqN0mN6RvimRBTzlm5zZbGbcmA= -b
        env:
          VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
          VPN_USER: ${{ secrets.VPN_USER }}
          VPN_HOST: ${{ secrets.VPN_HOST }}

      - name: 🔍 Verify VPN Connection
        run: ip a

      - name: 📡 List Network Routes
        run: ip route

      - name: 🔐 Test Internal Connectivity via SSH
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} 'echo "SSH connection successful"'

      - name: 🚀 Clone Repository on Remote Server
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
            cd /var/personigrama/personigramaUnibagueBackend || exit;

            # Ensure Git recognizes the directory as safe
            git config --global --add safe.directory /var/personigrama/personigramaUnibagueBackend;

            # Stash any local changes before pulling updates
            if [[ $(git status --porcelain) ]]; then
              git stash;
              echo "Local changes saved with git stash";
              STASHED=true;
            else
              echo "No local changes found";
              STASHED=false;
            fi

            # Pull the latest changes
            git pull --rebase;

            # Remove stash only if it was created
            if [[ "$STASHED" == "true" ]]; then
              git stash drop;
              echo "Stash removed";
            fi'      

      - name: 🔨 Build and Deploy Backend
        run: |
          sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
            cd /var/personigrama/personigramaUnibagueBackend;

            # Grant proper permissions to avoid permission errors
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S chmod -R 777 /var/personigrama/personigramaUnibagueBackend;

            # Stop existing backend service before deleting files
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S systemctl stop backend-personigrama || echo "Service not running, skipping stop.";

            # Kill any remaining Java processes running the old backend (if necessary)
            OLD_PID=$(ps aux | grep personigramaunibaguebackend | grep -v grep | awk "{print \$2}")
            if [[ -n "$OLD_PID" ]]; then
              echo "Killing old backend process: $OLD_PID";
              echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S kill -9 $OLD_PID;
            else
              echo "No existing backend process found.";
            fi

            # Forcefully delete the target directory to prevent permission issues
            echo "${{ secrets.INTERNAL_SSH_PASSWORD }}" | sudo -S rm -rf target;

            # Set execution permission for Maven wrapper
            chmod +x ./mvnw;

            # Clean and install dependencies
            ./mvnw clean install -DskipTests;

            # Package the Spring Boot application into a JAR file
            ./mvnw package -DskipTests;

            # Ensure the JAR file is placed in the correct location: target/
            if [ -f target/personigramaunibaguebackend-0.0.1-SNAPSHOT.jar ]; then
              echo "JAR file successfully built!";
            else
              echo "Error: JAR file not found in target/. Build may have failed.";
              exit 1;
            fi

            # Start the backend application from the target directory
            cd target;
            nohup java -jar personigramaunibaguebackend-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &
            echo "Backend started successfully!";

            # Verify that the backend is running
            ps aux | grep personigramaunibaguebackend | grep -v grep;
          '
